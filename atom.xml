<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IconSon-Blog</title>
  
  
  <link href="https://iconson.top/atom.xml" rel="self"/>
  
  <link href="https://iconson.top/"/>
  <updated>2022-08-21T15:39:30.744Z</updated>
  <id>https://iconson.top/</id>
  
  <author>
    <name>Johnson</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅谈虚拟内存</title>
    <link href="https://iconson.top/%E6%B5%85%E8%B0%88%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/"/>
    <id>https://iconson.top/%E6%B5%85%E8%B0%88%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</id>
    <published>2022-08-21T09:16:05.000Z</published>
    <updated>2022-08-21T15:39:30.744Z</updated>
    
    <content type="html"><![CDATA[<p>​    关于虚拟内存，本人虽然在上学校的操作系统课的时候有学到过，但说来惭愧，我对这一块的知识也是没有完全的掌握，还感觉到有点抽象。所以最近两天阅读了下CSAPP的虚拟内存这一章和参考了小林coding有关内存管理的笔记，终于是对虚拟内存这一块有了个大致的理解。</p><span id="more"></span><h2 id="何为虚拟内存"><a href="#何为虚拟内存" class="headerlink" title="何为虚拟内存"></a>何为虚拟内存</h2><p>​    如果我们所有操作都直接去操作到物理内存的话很容易出现问题，当太多的进程需要太多的内存时，会因为内存的不足而导致部分进程无法运行。而且由于都是操作一块物理内存，很容易有一个进程写了另一个进程使用的内存造成问题，不好管理。所以为了更好地对内存进行管理，就有了虚拟内存。</p><p>​    虚拟内存是对主存的一个抽象，我个人的理解来说，虚拟内存是磁盘里某个部分的映射，也就是虚拟内存其实是磁盘里某块连续的空间来的。虚拟内存的好处如下：</p><blockquote><ul><li>把主存当作是一个存储在磁盘上的地址空间的<strong>高速缓存</strong>，虚拟内存维护的是磁盘里面的数据，而这些数据在需要时会从磁盘缓存到主存中，让进程认为自己拥有这么一块主存空间，而主存存储一些活动区域，进程的部分代码可以缓存在其中，大大地<strong>提高了主存的利用率</strong>。</li><li>虚拟内存为每个进程都提供了一致的地址空间，每个进程都有自己的私有区域和共享区域，即<strong>方便了内存的管理</strong>，也<strong>保护了每个进程的地址空间不被其他进程破坏</strong>。</li></ul></blockquote><h2 id="虚拟内存结构"><a href="#虚拟内存结构" class="headerlink" title="虚拟内存结构"></a>虚拟内存结构</h2><p>​    CSAPP中有这么一张图描绘了Linux下虚拟内存的结构：</p><p><img data-src="https://typora-oss-pic.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20220821174738227.png" alt="image-20220821174738227"></p><p>​    图中可以看到虚拟内存的结构就是一个<code>[内核虚拟内存][进程虚拟内存]</code>。</p><h3 id="内核虚拟内存"><a href="#内核虚拟内存" class="headerlink" title="内核虚拟内存"></a>内核虚拟内存</h3><p>​    内核虚拟内存中又有对于每个进程而言相同和不相同的区域。物理内存和内核代码数据结构对每个进程来说是一样的，这部分区域里有着所映射的所有进程共享的物理页面，还有内核的代码和全局数据结构。另外一部分就是每个进程不同的数据部分，例如每个进程自己的页表、描述了进程任务的<code>task_struct</code>结构、描述了进程使用的虚拟内存情况的<code>mm_struct</code>结构和内核在执行上下文中执行代码时使用的栈。</p><p>​    <code>task_struct</code>是内核为每一个进程维护的一个单独的任务结构，这个结构的元素包含或者指向内核运行该进程所需要的所有信息，例如<strong>进程ID、指向用户栈的指针、可执行目标文件的名字和程序计数器</strong>等。该结构里有一个元素指向了<code>mm_struct</code>，这个结构描述了虚拟内存当前的状态，该结构里我们关注<code>pgd</code>和<code>mmap</code>这两个字段，<code>pgd</code>指向的是一级页表的基址，而<code>mmap</code>指向的是一个描述区域结构<code>vm_area_structs</code> 的链表，这个区域结构描述了当前虚拟地址空间的一个区域。</p><p><img data-src="https://typora-oss-pic.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20220821180629323.png" alt="image-20220821180629323"></p><p>​    <code>vm_prot</code>描述了该区域内的页面读写权限，<code>vm_flags</code>描述了该区域内的页面是私有还是共享的。</p><h3 id="进程虚拟内存"><a href="#进程虚拟内存" class="headerlink" title="进程虚拟内存"></a>进程虚拟内存</h3><p>​    进程虚拟内存从下到上的顺序是<code>.text</code>→<code>.data</code>→<code>.bss</code>→<code>运行时堆</code>→<code>共享库的内存映射区域</code>→<code>用户栈</code>，剩下的一些区域没有虚拟页，内核不记录这些不存在的虚拟页，这些部分也不占用任何的资源。</p><p>​    <code>.text</code>存储的是编译好的代码段。</p><p>​    <code>.data</code>存储的是已经进行了初始化的数据。</p><p>​    <code>.bss</code>存储的是还未进行初始化的数据或者初始化为0的数据，是请求二进制零的，仅是占位符，不占空间。</p><p>​    <strong><code>.text</code>段是只读的</strong>，而**<code>.data</code>和<code>.bss</code>段是可读/写的**。</p><p>​    <code>运行时堆</code>则是运行时创建的一个区域，在C/C++中通常是通过<code>malloc</code>进行分配的，堆主要是存储的是我们运行进程时创建的一些变量对象等内容，内核维护着一个<code>brk</code>指针，指向堆的顶部。</p><p>​    <code>共享库的映射区域</code>存储的就是与当前进程链接的共享对象的映射，概括的说就是动态库、共享内存等。</p><p>​    <code>用户栈</code>则存储的是局部变量和函数调用的上下文等。</p><p>​    如果学过Java的JVM的，对堆和栈都或多或少有印象和认识的，学习了虚拟内存后再去回顾JVM中类加载机制、对象创建和<strong>volatile</strong>变量的底层原理，说不定会有更加深刻的认知和记忆。</p><h2 id="虚拟页"><a href="#虚拟页" class="headerlink" title="虚拟页"></a>虚拟页</h2><p>​    虚拟内存被系统分割成大小固定的块，这些块我们叫做<strong>虚拟页</strong>，物理内存分割的我们类似地称为<strong>物理页</strong>。虚拟页可以分为下面这三种：</p><blockquote><ul><li>已经被分配且缓存在物理内存中的</li><li>已经被分配但是还未缓存在物理内存中的</li><li>还未被分配的。</li></ul></blockquote><p><img data-src="https://typora-oss-pic.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20220821223900550.png" alt="image-20220821223900550"></p><h3 id="页表"><a href="#页表" class="headerlink" title="页表"></a>页表</h3><p>​    为了判定一个虚拟页是否有缓存在物理内存中，使用到了一个叫做<strong>页表</strong>的结构，虚拟地址空间的每个页都有个在页表的页表项，这个页表项存有这个页面的有效位和其对应的物理地址或者磁盘地址，当有效位为1时，为物理地址，有效位为0时，如果页面已经分配，则为磁盘地址，否则为空地址。</p><p><img data-src="https://typora-oss-pic.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20220821233804778.png" alt="image-20220821233804778"></p><p>​    页面的查找流程通常是这样的：处理器生成一个虚拟地址给CPU里的MMU(内存管理单元)，然后MMU翻译出这个虚拟地址所对应的页表项地址去页表查找，如果对应的页在内存中，则内存向MMU返回对应的页表项，然后MMU得出对应的物理地址后传送到内存中，最后内存返回所请求的数据给处理器。</p><h3 id="缺页"><a href="#缺页" class="headerlink" title="缺页"></a>缺页</h3><p>​    上面是比较理想的情况，也有出现缺页的情况，即对应的物理页不在内存中，这时候就会触发缺页中断，系统由用户态进入到内核态，调用缺页异常处理程序，这个程序会选择一个牺牲页，如果该页面是个脏页面，内核就会把它写回磁盘后释放掉。然后再从磁盘中将对应的页面复制到内存中并更新页表，重新回到引起缺页的指令。而这在磁盘和内存之间传送页的行为称之为<strong>交换</strong>或者<strong>页面调度</strong>。要注意页面没有命中的影响是挺大的。如果调度的页面大小超过了物理内存的大小，就会不断进行页面地换入换出，造成<strong>抖动</strong>，这是很不好的影响。</p><p><img data-src="https://typora-oss-pic.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20220821231454373.png" alt="image-20220821231454373"></p><h3 id="多级页表"><a href="#多级页表" class="headerlink" title="多级页表"></a>多级页表</h3><p>​    通常我们的页面的大小为<code>4KB</code>，一个页表项的大小为<code>4B</code>，在32位的系统下，就有$$2^{20}$$个页面，这样一个进程的页表就达到了<code>4MB</code>。所以就有了<strong>多级页表</strong>。假设我们有一个二级页表，第一级页表存储的是指向第二级页表的地址，第二级页表存储的是物理地址或者磁盘地址。这样我们就可以用一个<code>4KB</code>的一级页表去管理理论上总共<code>4MB</code>的二级页表，这看起来好像比之前多了，但其实我们往往不会为一个进程分配那么多内存的，而且如果一级页表的某个页表项是空的，则其对应的二级页表也不会存在的，只有在需要时才会创建，我们假设一级页表只有20%的页面在使用，那么所需要的的内存就是$$4KB+4MB*0.2=0.804MB$$，对比起只有单独的页表的<code>4MB</code>，那是节省了巨大的内存。</p><p><img data-src="https://typora-oss-pic.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20220821233204041.png" alt="image-20220821233204041"></p><h3 id="快表TLB"><a href="#快表TLB" class="headerlink" title="快表TLB"></a>快表TLB</h3><p>​    除了多级页表，也有一个<code>TLB</code>，即我们所说的<strong>快表</strong>。根据<strong>局部性原理</strong>，在一段时间内，整个程序的执行仅限于程序中的某一部分。相应地，执行所访问的存储空间也局限于某个内存区域。我们把程序最常访问的页表项存在快表中，且快表是在CPU芯片里的，地址的翻译步骤都在MMU上，如果命中页面的话那速度是非常快的。如果快表没有命中，就会查找常规的页表，然后把查找到的页表项也存储到快表中，这一步可能会覆盖掉某个快表上的条目。</p><p><img data-src="https://typora-oss-pic.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20220821233649707.png" alt="image-20220821233649707"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://xiaolincoding.com/os/3_memory/vmem.html">小林coding-为什么要有虚拟内存</a></li><li>《深入理解计算机系统》</li></ul></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;​    关于虚拟内存，本人虽然在上学校的操作系统课的时候有学到过，但说来惭愧，我对这一块的知识也是没有完全的掌握，还感觉到有点抽象。所以最近两天阅读了下CSAPP的虚拟内存这一章和参考了小林coding有关内存管理的笔记，终于是对虚拟内存这一块有了个大致的理解。&lt;/p&gt;</summary>
    
    
    
    <category term="操作系统" scheme="https://iconson.top/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="操作系统" scheme="https://iconson.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Mysql慢查询——查询优化</title>
    <link href="https://iconson.top/Mysql%E6%85%A2%E6%9F%A5%E8%AF%A2%E2%80%94%E2%80%94%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/"/>
    <id>https://iconson.top/Mysql%E6%85%A2%E6%9F%A5%E8%AF%A2%E2%80%94%E2%80%94%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/</id>
    <published>2022-08-17T10:11:19.000Z</published>
    <updated>2022-08-17T10:12:07.146Z</updated>
    
    <content type="html"><![CDATA[<p>在一些公司的面试题中，可以经常看到有这么一道MySQL的面试题：<code>对于SQL查询慢的问题你要怎么去发现和解决</code>。最初我也大概只能回答个索引相关的，比如”通过EXPLAIN查看查询的访问类型和一些查询情况”， “查看是否可以在某些表的字段增加索引然后改写查询语句”等，网上的八股也很少提及这个问题，所以我还是去阅读了一下《高性能MySQL》，通过阅读后，我也大致地了解了查询的一些问题所在以及优化的方法，这篇文章便是我针对这本书第六章内容的一些整理总结(其实就是相当于摘抄吧 :triumph: )。方便自己记忆的同时也放到博客上来给博客更新一下(其实是都放到本地没怎么上传到博客，属于是懒:dog:了)</p><span id="more"></span><h2 id="为什么查询慢"><a href="#为什么查询慢" class="headerlink" title="为什么查询慢"></a>为什么查询慢</h2><p>​    在我们看待这个问题的时候，我们就要想：是什么造成SQL的查询慢呢，通过对索引的学习我们也知道索引对于高性能的重要性，但光有索引也是不够的，查询语句的合理性也是要考虑的，如果一个查询语句写的很烂，即使我们的表结构和索引设计的再好，那也是无济于事的。</p><p>​    查询的生命周期大致可以这么来看：客户端发送请求到服务器:point_right:服务器进行解析:point_right:生成执行计划:point_right:<strong>执行</strong>:point_right:返回结果给客户端。一个查询会在一个生命周期内涉及到这些个任务，而每个任务的完成时间也是不同的。我们可以针对这么一个大概的生命周期概念，来对我们的查询进行一个优化。</p><h2 id="优化查询访问"><a href="#优化查询访问" class="headerlink" title="优化查询访问"></a>优化查询访问</h2><p>​    查询性能低一个最基本的原因是我们访问的数据太多，针对查询数据多这一问题，我们可以看看是否有存在这么两个问题：<code>是否查询了很多我们不需要的数据</code>；<code>MySQL的服务器是否在分析大量超过我们需要的数据</code>。</p><h3 id="是否查询了很多不需要的数据"><a href="#是否查询了很多不需要的数据" class="headerlink" title="是否查询了很多不需要的数据"></a>是否查询了很多不需要的数据</h3><p>​    我们通常会认为MySQL返回的是我们需要的数据，但实际上MySQL是<strong>先返回全部的结果集再进行计算</strong>，所以我们有时候要考虑我们是否真的需要这么多数据呢，就好像我们要让一个页面显示10条数据，我们就要先查个100条数据然后再选前10条展示吗，显而易见是不用的，我们加个 limit 即可。</p><p>​    对于<code>select *</code>的写法我们也要在使用的时候去想我们是否真的需要去使用它呢，对于一些开发者来说，在知道其性能影响的情况下，这样的写法可以简易开发和做到代码复用，是值得考虑的。<code>select *</code>会使得优化器无法完成<strong>索引覆盖扫描</strong>这类的优化，也会给服务器带来额外的IO、内存和CPU的消耗，在不需要<code>select *</code>的时候它便会给我们造成本没有的性能影响了。</p><p>​    也有这么一种容易发生的情况，就是我们多次重复执行了相同的执行并且返回相同的数据，对于这样的数据，我们可以在第一次查询该数据时将其缓存起来，这样后面再需要时直接从缓存中获取即可。</p><h3 id="MySQL是否分析扫描额外的数据"><a href="#MySQL是否分析扫描额外的数据" class="headerlink" title="MySQL是否分析扫描额外的数据"></a>MySQL是否分析扫描额外的数据</h3><p>​    当我们确认我们查询返回的确实是我们需要的数据后，我们就应该看看查询为了返回结果是否扫描了过多的数据。通常简单的衡量查询开销的指标是：<code>响应时间</code>,<code>扫描行数</code>,<code>返回行数</code>，这三个指标都记录在了MySQL的<strong>慢日志</strong>中，所以<strong>检查慢日志记录是扫描行数过多的查询的好办法</strong>。</p><p>​    如果我们的查询扫描了大量的数据却只返回很少的行，可以考虑如下的优化方式：</p><ul><li>使用<strong>索引覆盖扫描</strong>，使存储引擎不需要回表即可返回结果</li><li>改变库表结构</li><li>重写这个复杂查询</li></ul><h2 id="重构查询方式"><a href="#重构查询方式" class="headerlink" title="重构查询方式"></a>重构查询方式</h2><p>​    如果我们的查询的列确实是需要的，索引的设计和库表的设计也没什么问题的时候，那么就可以考虑下更改我们的查询方式。对于一个大查询，我们可以考虑对它进行<code>分而治之</code>的方法来进行多个小查询。对于一些关联查询，我们也考虑是不是能对它进行<strong>分解</strong>，就像书上的例子那样：</p><p><img data-src="https://typora-oss-pic.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20220817170821072.png" alt="image-20220817170821072"></p><p>​    这样可以让缓存的效率更高，因为有缓存，我们可能可以跳过某条查询或者减少IN()里的内容。也可以减少了锁的竞争。这样的查询也可能能提升查询效率，<code>IN()</code>让MySQL按照ID顺序进行查询，顺序IO是要比随机IO高效的。这样还可以减少冗余记录的查询，在数据库上关联查询我们就可能需要重复访问同一数据，在应用层上进行关联让我们可以对某条数据只查询一次，减少了网络和内存的消耗。</p><p>上面所讲的是针对查询的访问和方式，但如果知道MySQL如何优化和执行查询时，那我们在优化查询时便可以按照一些原则让优化器能按我们设想的方向运行。下面这张图是发送一个请求时MySQL所做的事情：</p><p><img data-src="https://typora-oss-pic.oss-cn-guangzhou.aliyuncs.com/typoraImg/image-20220817172702465.png" alt="image-20220817172702465"></p><p>图中的<code>查询缓存</code>在MySQL8已经是关闭的了，《高性能MySQL》所基于的版本还是5版本的，所以如果是8版本或以上的是可以忽略掉查询缓存的。书上在<code>查询优化</code>做了很多的篇幅进行讲解，讲了很多优化器在一些查询上的优化细节和做法，这部分如果放上来记录的话篇幅还是挺长的，多到我也不知道怎么整理写上了比较好，所以第六章的查询优化处理这块还是很建议大家去阅读原书的，在这里我就先不写着了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    一个高性能的查询，需要好的库表设计、索引设计、查询语句设计和查询的优化方式，而查询的优化设计又是很多细节的，所以当SQL查询慢的原因是由于我们查询语句设计不妥当时，便可以照着该书籍第六章的方法去进行优化。</p><p>​    通过网上资料的搜索SQL查询慢的原因也可能不在于查询语句的问题，比如网络不好的情况下，客户端和服务端之间的连接和传输受到影响、IO吞吐量小、缓存不够、出现死锁等等，硬件软件都会或多或少的影响到查询，还是要针对特定的原因去寻找对应的解决办法的。对于我个人来说，排插SQL查询慢的基本方向是通过查询<strong>慢日志</strong>来定位慢查询SQL，然后通过<strong>explain</strong>命令去分析该SQL的执行计划后进行相应的优化，如果优化完还是查询慢或者没有什么优化方向后，就再去考虑网络、内存、服务器和应用程序设计上的问题。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在一些公司的面试题中，可以经常看到有这么一道MySQL的面试题：&lt;code&gt;对于SQL查询慢的问题你要怎么去发现和解决&lt;/code&gt;。最初我也大概只能回答个索引相关的，比如”通过EXPLAIN查看查询的访问类型和一些查询情况”， “查看是否可以在某些表的字段增加索引然后改写查询语句”等，网上的八股也很少提及这个问题，所以我还是去阅读了一下《高性能MySQL》，通过阅读后，我也大致地了解了查询的一些问题所在以及优化的方法，这篇文章便是我针对这本书第六章内容的一些整理总结(其实就是相当于摘抄吧 :triumph: )。方便自己记忆的同时也放到博客上来给博客更新一下(其实是都放到本地没怎么上传到博客，属于是懒:dog:了)&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL" scheme="https://iconson.top/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://iconson.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>JAVA均匀生成随机数</title>
    <link href="https://iconson.top/JAVA%E5%9D%87%E5%8C%80%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <id>https://iconson.top/JAVA%E5%9D%87%E5%8C%80%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/</id>
    <published>2021-09-05T03:38:33.000Z</published>
    <updated>2021-09-05T07:43:44.840Z</updated>
    
    <content type="html"><![CDATA[<h2 id="公式推导"><a href="#公式推导" class="headerlink" title="公式推导"></a>公式推导</h2><p>假如有一个函数rand2()会均匀生成[1,2]的随机数，现在想要实现一个rand4()的函数，第一次接触该类问题时，第一反应是如下所示：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TAP"><figure class="iseeu highlight /tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rand2() + rand2() = ? ==&gt; [2,4]</span><br><span class="line">  <span class="number"> 1 </span>   +  <span class="number"> 1 </span>    = 2</span><br><span class="line">  <span class="number"> 1 </span>   +  <span class="number"> 2 </span>    = 3</span><br><span class="line">  <span class="number"> 2 </span>   +  <span class="number"> 1 </span>    = 3</span><br><span class="line">  <span class="number"> 2 </span>   +  <span class="number"> 2 </span>    = 4</span><br><span class="line"></span><br><span class="line">// 为了把生成随机数的范围规约成[1,n]，于是在上一步的结果后减1</span><br><span class="line">(rand2()-1) + rand2() = ? ==&gt; [1,3]</span><br><span class="line">  <span class="number"> 0 </span>      +  <span class="number"> 1 </span>    = 1</span><br><span class="line">  <span class="number"> 0 </span>      +  <span class="number"> 2 </span>    = 2</span><br><span class="line">  <span class="number"> 1 </span>      +  <span class="number"> 1 </span>    = 2</span><br><span class="line">  <span class="number"> 1 </span>      +  <span class="number"> 2 </span>    = 3</span><br></pre></td></tr></table></figure></div><span id="more"></span><p>会发现生成的数字不是等概率的，造成这种情况的原因也很明显，有些数字是可以通过几个组合得来，有的只能通过一种组合得来</p><p>若我们把(rand2()-1)乘以2，则会得到</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TAP"><figure class="iseeu highlight /tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(rand2()-1) ×<span class="number"> 2 </span>+ rand2() = ?</span><br><span class="line">  <span class="number"> 0 </span>           +  <span class="number"> 1 </span>    = 1</span><br><span class="line">  <span class="number"> 0 </span>           +  <span class="number"> 2 </span>    = 2</span><br><span class="line">  <span class="number"> 2 </span>           +  <span class="number"> 1 </span>    = 3</span><br><span class="line">  <span class="number"> 2 </span>           +  <span class="number"> 2 </span>    = 4</span><br></pre></td></tr></table></figure></div><p>得到的结果恰好是等概率的。我们可以通过这种方法实现rand2()-&gt;rand4()</p><p>我们再举个例子：有两个均匀随机函数rand9()和rand7()，a=(rand9-1)*7，b = rand7，result = a+b</p><p>则能得到下列表格的结果：</p><table><thead><tr><th>a\b</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr><tr><td>7</td><td>8</td><td>9</td><td>10</td><td>11</td><td>12</td><td>13</td><td>14</td></tr><tr><td>14</td><td>15</td><td>16</td><td>17</td><td>18</td><td>19</td><td>20</td><td>21</td></tr><tr><td>21</td><td>22</td><td>23</td><td>24</td><td>25</td><td>26</td><td>27</td><td>28</td></tr><tr><td>28</td><td>29</td><td>30</td><td>31</td><td>32</td><td>33</td><td>34</td><td>35</td></tr><tr><td>35</td><td>36</td><td>37</td><td>38</td><td>39</td><td>40</td><td>41</td><td>42</td></tr><tr><td>42</td><td>43</td><td>44</td><td>45</td><td>46</td><td>47</td><td>48</td><td>49</td></tr><tr><td>49</td><td>50</td><td>51</td><td>52</td><td>53</td><td>54</td><td>55</td><td>56</td></tr><tr><td>56</td><td>57</td><td>58</td><td>59</td><td>60</td><td>61</td><td>62</td><td>63</td></tr></tbody></table><p>可以看到这样也可以均匀随机的生成[1,63]的随机数，则可以得到这样的一个规律：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="REASONML"><figure class="iseeu highlight /reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">已知 rand<span class="constructor">_N()</span> 可以等概率的生成<span class="literal">[<span class="number">1</span>, N]</span>范围的随机数</span><br><span class="line">那么：</span><br><span class="line">(rand<span class="constructor">_X()</span> - <span class="number">1</span>) × Y + rand<span class="constructor">_Y()</span> ==&gt; 可以等概率的生成<span class="literal">[<span class="number">1</span>, X <span class="operator">*</span> Y]</span>范围的随机数</span><br><span class="line">即实现了 rand_X*<span class="constructor">Y()</span></span><br></pre></td></tr></table></figure></div><p>公式：<br>$$<br>(rand_X() - 1) × Y + rand_Y() \Rightarrow 可以等概率的生成[1, X * Y]范围的随机数<br>$$</p><h2 id="LC题目-优化"><a href="#LC题目-优化" class="headerlink" title="LC题目+优化"></a>LC题目+优化</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>再来看看Leetcode上的这一题：<a href="https://leetcode-cn.com/problems/implement-rand10-using-rand7/">470. 用 Rand7() 实现 Rand10()</a></p><p>要实现rand10()，就需要先实现<code>rand_N()</code>，并且保证N大于10且是10的倍数。这样再通过<code>rand_N() % 10 + 1</code> 就可以得到[1,10]范围的随机数了。</p><p>rand_N()的实现方法可以通过上面推导出来的规律得到：</p><p><code>(rand7()-1) × 7 + rand7()  ==&gt; rand49()</code></p><p>但是这样实现的N不是10的倍数，这该怎么处理？这里就涉及到了“<strong>拒绝采样</strong>”的知识了，也就是说，如果某个采样结果不在要求的范围内，则丢弃它。基于上面的这些分析，再回头看下面的代码，想必是不难理解了。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> <span class="keyword">extends</span> <span class="title">SolBase</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rand10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = (rand7() - <span class="number">1</span>) * <span class="number">7</span> + rand7(); <span class="comment">// 等概率生成[1,49]范围的随机数</span></span><br><span class="line">            <span class="keyword">if</span>(num &lt;= <span class="number">40</span>) <span class="keyword">return</span> num % <span class="number">10</span> + <span class="number">1</span>; <span class="comment">// 拒绝采样，并返回[1,10]范围的随机数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>根据上面的分析，我们已经知道<code>(rand7() - 1) * 7 + rand7()</code> 等概率生成<code>[1,49]</code>范围的随机数。而由于我们需要的是10的倍数，因此，需要舍弃掉<code>[41, 49]</code>这9个数。优化的点就始于——我们能否利用这些范围外的数字，以减少丢弃的值，提高命中率总而提高随机数生成效率。</p><p>当生成的随机数x在<code>[41,49]</code>时，我们拒绝采样这一部分，而舍弃的这一部分我们可以得到<code>[1,9]</code>的均匀随机数，我们将这一随机数通过上面的处理后就可以得到<code>[1,63]</code>的随机数，若这次生成的随机数在<code>[61,63]</code>时，我们也拒绝采样这一部分，而舍弃的这一部分我们可以得到<code>[1,3]</code>的均匀随机数，我们将这一随机数通过上面的处理后就可以得到<code>[1,21]</code>的随机数，若这次生成的随机数为21，则我们拒绝采样21，但是舍弃的21只能得到1这一个随机数，没有用处，所以我们只能重新生成<code>[1,49]</code>的随机数。代码如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> <span class="keyword">extends</span> <span class="title">SolBase</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rand10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> a = (rand7()-<span class="number">1</span>)*<span class="number">7</span>;</span><br><span class="line">            <span class="keyword">int</span> b = rand7();</span><br><span class="line">            <span class="keyword">int</span> num = a+b;</span><br><span class="line">            <span class="keyword">if</span>(num&lt;=<span class="number">40</span>)<span class="keyword">return</span> num%<span class="number">10</span>+<span class="number">1</span>;</span><br><span class="line">            a = (num-<span class="number">40</span>-<span class="number">1</span>)*<span class="number">7</span>;</span><br><span class="line">            b = rand7();</span><br><span class="line">            num = a+b;</span><br><span class="line">            <span class="keyword">if</span>(num&lt;=<span class="number">60</span>)<span class="keyword">return</span> num%<span class="number">10</span>+<span class="number">1</span>;</span><br><span class="line">            a = (num-<span class="number">60</span>-<span class="number">1</span>)*<span class="number">7</span>;</span><br><span class="line">            b = rand7();</span><br><span class="line">            num = a+b;</span><br><span class="line">            <span class="keyword">if</span>(num&lt;=<span class="number">20</span>)<span class="keyword">return</span> num%<span class="number">10</span>+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>执行效率也比上面快了许多</p><p><img data-src="/JAVA%E5%9D%87%E5%8C%80%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E6%95%B0/image-20210905123421344.png" alt="image-20210905123421344"></p><p>保留的数字范围可以通过下面这个公式得到：</p><p>假设有<code>rand_X</code>，想得到<code>rand_Y</code>，<br><code>a = (rand_X()-1)*Y</code>，<code>b = rand_X()</code>;<br>则保留范围为：<br>$$<br>[1,Y*((a+b)_{max}/Y)]<br>$$<br>返回的数字为：<br>$$<br>(a+b)\pmod Y + 1<br>$$<br>参考题解链接：<a href="https://leetcode-cn.com/problems/implement-rand10-using-rand7/solution/cong-zui-ji-chu-de-jiang-qi-ru-he-zuo-dao-jun-yun-/">从最基础的讲起如何做到均匀的生成随机数</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;公式推导&quot;&gt;&lt;a href=&quot;#公式推导&quot; class=&quot;headerlink&quot; title=&quot;公式推导&quot;&gt;&lt;/a&gt;公式推导&lt;/h2&gt;&lt;p&gt;假如有一个函数rand2()会均匀生成[1,2]的随机数，现在想要实现一个rand4()的函数，第一次接触该类问题时，第一反应是如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight tap&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rand2() + rand2() = ? ==&amp;gt; [2,4]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt; 1 &lt;/span&gt;   +  &lt;span class=&quot;number&quot;&gt; 1 &lt;/span&gt;    = 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt; 1 &lt;/span&gt;   +  &lt;span class=&quot;number&quot;&gt; 2 &lt;/span&gt;    = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt; 2 &lt;/span&gt;   +  &lt;span class=&quot;number&quot;&gt; 1 &lt;/span&gt;    = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt; 2 &lt;/span&gt;   +  &lt;span class=&quot;number&quot;&gt; 2 &lt;/span&gt;    = 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 为了把生成随机数的范围规约成[1,n]，于是在上一步的结果后减1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(rand2()-1) + rand2() = ? ==&amp;gt; [1,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt; 0 &lt;/span&gt;      +  &lt;span class=&quot;number&quot;&gt; 1 &lt;/span&gt;    = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt; 0 &lt;/span&gt;      +  &lt;span class=&quot;number&quot;&gt; 2 &lt;/span&gt;    = 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt; 1 &lt;/span&gt;      +  &lt;span class=&quot;number&quot;&gt; 1 &lt;/span&gt;    = 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt; 1 &lt;/span&gt;      +  &lt;span class=&quot;number&quot;&gt; 2 &lt;/span&gt;    = 3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="JAVA" scheme="https://iconson.top/categories/JAVA/"/>
    
    
    <category term="JAVA" scheme="https://iconson.top/tags/JAVA/"/>
    
    <category term="算法" scheme="https://iconson.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>代码块Mac风格</title>
    <link href="https://iconson.top/%E4%BB%A3%E7%A0%81%E5%9D%97Mac%E9%A3%8E%E6%A0%BC/"/>
    <id>https://iconson.top/%E4%BB%A3%E7%A0%81%E5%9D%97Mac%E9%A3%8E%E6%A0%BC/</id>
    <published>2021-05-08T07:52:17.000Z</published>
    <updated>2021-05-08T08:19:29.188Z</updated>
    
    <content type="html"><![CDATA[<p>看到网上别人博客的代码块都是Mac风格＋黑底，于是乎我也整一波，但是发现按照网上的来修改highlight_theme还是不得行，主要是网上的大部分是旧版的，跟现版本的配置文件有点出入，于是在看了一堆博客和分析报错原因后，我找到了实现的办法。</p><p><img data-src="/%E4%BB%A3%E7%A0%81%E5%9D%97Mac%E9%A3%8E%E6%A0%BC/image-20210508161438627.png" alt="image-20210508161438627"></p><span id="more"></span><p>通过 <a href="https://miaosakurai.com/">樱井喵</a> 的这一篇 <a href="https://miaosakurai.com/2020/04/20/Hexo-NexT%E7%BE%8E%E5%8C%96%F0%9F%8D%95Mac-Panel%E9%A3%8E%E6%A0%BC%E4%BB%A3%E7%A0%81%E5%9D%97%E9%85%8D%E7%BD%AE/">博客</a> ，直接在 <code>主题配置文件</code>配置一下 <code>codeblock.copy_button.style: mac</code>就行了</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YAML"><figure class="iseeu highlight /yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">mac</span></span><br></pre></td></tr></table></figure></div><p>要实现上面代码块的样式，我们可以在<code>站点目录\node_modules\highlight.js\styles</code>里发现有许多中css样式(tomorrow-theme也在其中)</p><p><img data-src="/%E4%BB%A3%E7%A0%81%E5%9D%97Mac%E9%A3%8E%E6%A0%BC/image-20210508160824026.png" alt="image-20210508160824026"></p><p>我们找到<code>主题配置文件</code>中的theme，把light和dark都改成上述文件夹里的某种样式就行了，我用的是tomorrow-night-bright，也就是本文代码块的样式。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YAML"><figure class="iseeu highlight /yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">tomorrow-night-bright</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">tomorrow-night-bright</span></span><br></pre></td></tr></table></figure></div><p>不过这种会对小代码块也同样生效，暂时我还没找到方法，等待后面找到了我再进行一波更新。</p><p>在报错中我也找到了一个highlight.js的地址：<code>站点目录\themes\next\scripts\events\lib\highlight.js</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;看到网上别人博客的代码块都是Mac风格＋黑底，于是乎我也整一波，但是发现按照网上的来修改highlight_theme还是不得行，主要是网上的大部分是旧版的，跟现版本的配置文件有点出入，于是在看了一堆博客和分析报错原因后，我找到了实现的办法。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;/%E4%BB%A3%E7%A0%81%E5%9D%97Mac%E9%A3%8E%E6%A0%BC/image-20210508161438627.png&quot; alt=&quot;image-20210508161438627&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="hexo配置" scheme="https://iconson.top/categories/hexo%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="hexo" scheme="https://iconson.top/tags/hexo/"/>
    
    <category term="代码块" scheme="https://iconson.top/tags/%E4%BB%A3%E7%A0%81%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>创建分支存储源文件</title>
    <link href="https://iconson.top/%E5%88%9B%E5%BB%BA%E5%88%86%E6%94%AF%E5%AD%98%E5%82%A8%E6%BA%90%E6%96%87%E4%BB%B6/"/>
    <id>https://iconson.top/%E5%88%9B%E5%BB%BA%E5%88%86%E6%94%AF%E5%AD%98%E5%82%A8%E6%BA%90%E6%96%87%E4%BB%B6/</id>
    <published>2021-05-07T16:54:36.000Z</published>
    <updated>2021-05-07T17:23:26.449Z</updated>
    
    <content type="html"><![CDATA[<p>为了防止日后出现换电脑的情况而导致自己的配置文件和一些文档消失，所以创建一个分支存放源文件是有必要的，当然你也可以选择存放到云盘，只要你记得更新就是了。创建分支存放的方法其实也不是很复杂。</p><span id="more"></span><h2 id="初始化版本库并与远程仓库关联"><a href="#初始化版本库并与远程仓库关联" class="headerlink" title="初始化版本库并与远程仓库关联"></a>初始化版本库并与远程仓库关联</h2><p>一般按照网上方法所创建的博客是没有与远程仓库建立关联的，通过几个git命令来进行关联。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//将你的本地文件夹初始化成一个版本库</span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line">//用 git remote add origin 你的github仓库地址 命令来建立与远程仓库的关联，这里的 origin 是你定义的远程仓库在本地的名字，你也可以叫别的，一般命名成 origin</span><br><span class="line">git remote add origin <span class="string">&quot;你的仓库地址&quot;</span></span><br></pre></td></tr></table></figure></div><h2 id="创建并切换分支，提交文件"><a href="#创建并切换分支，提交文件" class="headerlink" title="创建并切换分支，提交文件"></a>创建并切换分支，提交文件</h2><p>创建并切换分支：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b <span class="string">&quot;新分支名&quot;</span></span><br></pre></td></tr></table></figure></div><p>提交文件：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line"></span><br><span class="line">git commit -m<span class="string">&quot;源文件&quot;</span></span><br><span class="line"></span><br><span class="line">git push origin <span class="string">&quot;新分支名&quot;</span></span><br></pre></td></tr></table></figure></div><h2 id="在GitHub中更改新分支为默认分支"><a href="#在GitHub中更改新分支为默认分支" class="headerlink" title="在GitHub中更改新分支为默认分支"></a>在GitHub中更改新分支为默认分支</h2><p>把新建的分支设置成 默认分支，这样做的原因可以让你以后在别的机器上pull的时候能够直接拉取源文件，不用再指定分支。</p><p>在GitHub中进入settings中的branches，点击双向箭头进行切换。</p><p><img data-src="/%E5%88%9B%E5%BB%BA%E5%88%86%E6%94%AF%E5%AD%98%E5%82%A8%E6%BA%90%E6%96%87%E4%BB%B6/image-20210508010923455.png" alt="image-20210508010923455"></p><p>选中新创分支并点击Update</p><p><img data-src="/%E5%88%9B%E5%BB%BA%E5%88%86%E6%94%AF%E5%AD%98%E5%82%A8%E6%BA%90%E6%96%87%E4%BB%B6/image-20210508011012859.png" alt="image-20210508011012859"></p><p>它会弹出一个红色的经过，直接sure就行了。</p><h2 id="后续日常管理操作"><a href="#后续日常管理操作" class="headerlink" title="后续日常管理操作"></a>后续日常管理操作</h2><p>只要你的<code>站点配置文件</code>里deploy的branch是master，在你执行<code>hexo g -d</code>后也同样会更新。在你进行了文章添加修改或修改样式等改动后，通过下面流程进行管理：</p><ol><li>依次执行<code>git add .</code> 、<code>git commit -m&quot;xxx&quot;</code>、<code>git push origin 新创分支名</code>推送到GitHub(注意此时当前分支是你新创的分支)。</li><li>执行<code>hexo g -d</code>发布网站到master分支上</li></ol><p>建议不要调转这两者的顺序</p><h2 id="在其他电脑修改博客"><a href="#在其他电脑修改博客" class="headerlink" title="在其他电脑修改博客"></a>在其他电脑修改博客</h2><p>通过git clone将仓库拉下来(默认分支为你当时新创的分支)</p><p>然后在你copy下来的仓库文件夹通过git bash执行一下指令：<code>npm install hexo</code>、<code>npm install</code>、<code>npm install hexo-deployer-git</code>（不需要<code>hexo init</code>）。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;为了防止日后出现换电脑的情况而导致自己的配置文件和一些文档消失，所以创建一个分支存放源文件是有必要的，当然你也可以选择存放到云盘，只要你记得更新就是了。创建分支存放的方法其实也不是很复杂。&lt;/p&gt;</summary>
    
    
    
    <category term="hexo配置" scheme="https://iconson.top/categories/hexo%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="hexo" scheme="https://iconson.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>在文章中添加更新时间</title>
    <link href="https://iconson.top/makeUpdTime/"/>
    <id>https://iconson.top/makeUpdTime/</id>
    <published>2021-05-07T15:54:35.000Z</published>
    <updated>2021-05-08T07:27:03.525Z</updated>
    
    <content type="html"><![CDATA[<p>鉴于网上的文章许多都是通过修改<code>/themes/next/layout/_macro/post.swig</code>，并在<code>&lt;span class=&quot;post-time&quot;&gt;...&lt;/span&gt;</code>标签后添加一段代码，但是现在的版本找不到swig文件。所以写下这篇文章记录下该方法。</p><span id="more"></span><h2 id="初始方法-不需要"><a href="#初始方法-不需要" class="headerlink" title="初始方法(不需要)"></a>初始方法(不需要)</h2><p><del>经过几番查找和试验，可以<code>themes\next\layout\_partials\post\post-meta.njk</code>进行修改，并在如图所示的地方加入该代码：</del></p><p><img data-src="/makeUpdTime/image-20210508000023413.png" alt="添加位置"></p><p><del>代码如下：</del></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;%if post.updated and post.updated &gt; post.date%&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-updated&quot;</span>&gt;</span></span><br><span class="line">    <span class="symbol">&amp;nbsp;</span> | <span class="symbol">&amp;nbsp;</span> &#123;&#123; __(&#x27;post.updated&#x27;) &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">time</span> <span class="attr">itemprop</span>=<span class="string">&quot;dateUpdated&quot;</span> <span class="attr">datetime</span>=<span class="string">&quot;&#123;&#123; moment(post.updated).format() &#125;&#125;&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&#123;&#123; date(post.updated, config.date_format) &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; date(post.updated, config.date_format) &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></div><p>在你所对应的<code>language</code>配置文件(我的是zh-CN，目录为themes/next/languages/zh-CN.yml)添加或修改如下字段</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post:</span></span><br><span class="line">  <span class="attr">updated:</span> <span class="string">更新于</span></span><br></pre></td></tr></table></figure></div><p>在<code>主题配置文件</code>(/themes/next/_config.yml)中加入如下一行代码</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">display_updated:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></div><p>这样更新时间就能显示出来了。</p><p><img data-src="/makeUpdTime/image-20210508001321657.png" alt="image-20210508001321657"></p><hr><h2 id="现方法"><a href="#现方法" class="headerlink" title="现方法"></a>现方法</h2><p>后面的测试莫名其妙地发现不用加上面那一大段代码。</p><p>在<code>主题配置文件</code>(/themes/next/_config.yml)中加入如下一行代码和修改post_meta的update_at</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以加在最后一行</span></span><br><span class="line"><span class="attr">display_updated:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改update_at</span></span><br><span class="line"><span class="attr">post_meta:</span></span><br><span class="line"> <span class="attr">updated_at:</span></span><br><span class="line">     <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">     <span class="attr">another_day:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></div><p>在你所对应的<code>language</code>配置文件(我的是zh-CN，目录为themes/next/languages/zh-CN.yml)添加或修改如下字段</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post:</span></span><br><span class="line">  <span class="attr">updated:</span> <span class="string">更新于</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;鉴于网上的文章许多都是通过修改&lt;code&gt;/themes/next/layout/_macro/post.swig&lt;/code&gt;，并在&lt;code&gt;&amp;lt;span class=&amp;quot;post-time&amp;quot;&amp;gt;...&amp;lt;/span&amp;gt;&lt;/code&gt;标签后添加一段代码，但是现在的版本找不到swig文件。所以写下这篇文章记录下该方法。&lt;/p&gt;</summary>
    
    
    
    <category term="hexo配置" scheme="https://iconson.top/categories/hexo%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="hexo" scheme="https://iconson.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>在文章中添加图片</title>
    <link href="https://iconson.top/TestPage/"/>
    <id>https://iconson.top/TestPage/</id>
    <published>2021-05-07T06:27:50.000Z</published>
    <updated>2021-05-12T06:58:11.963Z</updated>
    
    <content type="html"><![CDATA[<p>这是通过 <code>hexo new TestPage</code> 命令所创建的一篇文章，存放在source目录下的_posts.</p><p>贴张图片测试一下能不能成功显示出来：👇</p><p><img data-src="/TestPage/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20201108102123.jpg" alt="测试图片"></p><span id="more"></span><p>若图片显示不出来，则在<code>站点根目录</code>下安装插件</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure></div><p>修改<code>站点配置文件</code></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: <span class="literal">true</span></span><br><span class="line">marked:</span><br><span class="line">  prependRoot: <span class="literal">true</span></span><br><span class="line">  postAsset: <span class="literal">true</span></span><br></pre></td></tr></table></figure></div><p>这样在创建文章时，会同样生成一个同名文件夹</p><p><img data-src="/TestPage/image-20210507150008908.png" alt="实例"></p><p>由于hexo生成的是.md文件，所以下载Typora进行文本编辑是一个很好的选择。从typora左上角的文件-&gt;偏好设置-&gt;图像里，在<code>插入图片时</code>那里改成复制到指定路径，并勾选上前三项</p><p><img data-src="/TestPage/image-20210507150259312.png" alt="image-20210507150259312"></p><p><del>当把图片复制到xxx文章后，图片会自动变为  ![](xxx/图片名.图片类型)，最后把xxx/去掉即可。</del></p><p>(第一次测试时去掉xxx/是可行的，后面又不行，因此重新加回xxx/)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是通过 &lt;code&gt;hexo new TestPage&lt;/code&gt; 命令所创建的一篇文章，存放在source目录下的_posts.&lt;/p&gt;
&lt;p&gt;贴张图片测试一下能不能成功显示出来：👇&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;/TestPage/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20201108102123.jpg&quot; alt=&quot;测试图片&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="hexo配置" scheme="https://iconson.top/categories/hexo%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="test" scheme="https://iconson.top/tags/test/"/>
    
    <category term="hexo" scheme="https://iconson.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://iconson.top/hello-world/"/>
    <id>https://iconson.top/hello-world/</id>
    <published>2021-05-06T10:26:40.237Z</published>
    <updated>2021-05-07T06:24:50.897Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
